1.这是一个什么东西
->我们知道在做裸机嵌入式开发中我们一般使用printf来打印调试信息，当我们需要输入指定的数据或者调用某个功能来调试时使用
按键或者直接改写代码重新下载运行是非常不方便的，所以就编写了这么一个精简的命令行输入接口command line interface模块
（tiny CLI），用来方便工程师调试代码功能以及添加产测功能。此模块采用纯C（C99）编写且依赖很少，可以非常快地移植到各个
平台使用，比如STM32，STM8裸机，stm32 + RTOS, wifi模块+freeRTOS，cc2530+Zstack, siliconLab EmberZnet等


2.怎么添加到自己的代码工程中去
1),拷贝文件夹tiny_cli到自己的源代码目录
2),如果使用tinyPrintf来实现格式化打印的话就把tiny_printf也拷贝到和tiny_cli相同的目录下（推荐）
3),把
tiny_cli.c
tiny_cli.h
tiny_cli_user.c
tiny_cli_user.h
tiny_printf.c
tiny_printf.h
添加到自己的工程中，编译应该出现一个错误->没有实现void _putchar(char character)函数，
stm32中可以这样实现：
//实现单个字符输出
void _putchar(char character)
{
    uint8_t ch = character;
	HAL_UART_Transmit(&huart1,&ch,1,2);
}

要想跑起来需要使用到“CLI主任务”和“CLI字符串输入”两个函数：

//CLI主任务(可以插入到main循环一直跑,也可以使用一个单独的任务线程来跑,为了节约资源可以有输入数据触发再运行)
void CLI_main(uint32_t sysTickMS);

//CLI字符串输入接口，可以在主循环中也可以在中断中输入数据
uint16_t CLI_stringInput(uint8_t *pData, uint16_t len);

比如在stm32中:

...

#include "main.h"
#include "stm32f1xx_hal.h"

/* USER CODE BEGIN Includes */

//把用到模块的头文件包含进来
#include "tiny_printf/tiny_printf.h"
#include "tiny_cli/tiny_cli.h"

/* USER CODE END Includes */

...

static uint8_t data;

...

int main(void)
{
	...
	
	while (1)
	{
		HAL_UART_Receive_IT(&huart1, &data, 1);
		
		CLI_main(HAL_GetTick());
		  
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) 
{ 
	CLI_stringInput(&data,1);
	
	HAL_UART_Receive_IT(&huart1, &data, 1);
}


3.怎么配置

1),配置整个CLI模块的开启和关闭

tiny_cli.h中

#define TINY_CLI_EN  //是否启用tiny CLI

关闭宏则关闭整个功能模块

2),开启关闭模块运行指示功能

tiny_cli.c中：

//使用LED指示CLI模块的运行情况,亮表示正在运行，灭表示未运行
//1 -开启；0 - 关闭
#define LED_IDENTIFY_EN 0

#if(LED_IDENTIFY_EN)
	#include "stm32f1xx.h"

	//指示CLI模块运行状态
	#define LED_IDENTIFY_RUN() 	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET)
	//指示CLI模块空闲状态
	#define LED_IDENTIFY_IDEL() HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET)
#else
	//指示CLI模块运行状态
	#define LED_IDENTIFY_RUN()
	//指示CLI模块空闲状态
	#define LED_IDENTIFY_IDEL()
#endif

#include "stm32f1xx.h"
HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET)
HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET)
LED控制根据不同平台去调整，使用LED_IDENTIFY_EN开启关闭


3)开启模块内部调试打印功能

tiny_cli.c中：

//调试打印等级: 0 - 关闭调试打印；1 - 打印上层信息； 2 - 打印上层底层信息
#define CLI_DBG_PRINTF_LEVEL 0

4),其它参数调整

tiny_cli.c中：

#define CLI_RING_BUF_SIZE 128       //定义CLI RX循环缓冲区大小

#define CLI_NAME_MAX_LEN 64	 		//命令名最大长度
#define CLI_ARG_MAX_LEN 256 		//命令参数最大长度
#define CLI_OPTION_MAX_LEN 16       //命令选项最大长度

#define CMD_CHAR_LEN 26             //命令字符打印占位长度
#define ARGS_CHAR_LEN 45            //参数字符打印占位长度

#define CLI_REV_TIMEOUT 500         //定义一条CLI命令接收超时时间MS

tiny_cli.h中：

//定义命令回复打印buffer大小
#define RSP_PRINT_BUF_SIZE 64

4),打印目标调整


tiny CLI本身功能打印输出调整可以修改tiny_cli.h中的

//定义CLI模块打印接口
#define CLI_printf tinyPrintf

把tinyPrintf替换成你需要函数


tiny CLI调试打印信息打印目标调整可以修改tiny_cli.c中的

//定义打印函数比如tinyPrintf，printf
//使用CLI_dbgLowLevel()打印底层信息，使用CLI_dbgHighLevel()打印上层信息
#if(CLI_DBG_PRINTF_LEVEL == 0)
	#define CLI_dbgLowLevel(str,...)
	#define CLI_dbgHighLevel(str,...)
#elif(CLI_DBG_PRINTF_LEVEL == 1)
	#define CLI_dbgLowLevel   tinyPrintf
	#define CLI_dbgHighLevel(str,...)
#elif(CLI_DBG_PRINTF_LEVEL == 2)
	#define CLI_dbgLowLevel   tinyPrintf
	#define CLI_dbgHighLevel  tinyPrintf
#endif

把tinyPrintf替换成你需要函数


4.怎么添加自己的CLI命令

打开tiny_cli_user.c可以看到

//命令表定义：命令名(不能有空格) - 命令函数名 - 参数类型 - 参数说明 - 命令功能描述
//---------------参数类型定义-----------------
//1 - 1字节整型，比如char 、uint8、 int8
//2 - 2字节整型，比如int16 、uint16 
//4 - 4字节整型，比如int32 、uint32
//f - 浮点类型数据，比如3.14
//s - 字符串数据类型，结尾以\0结束符
//b - buffer HEX数据类型,第一个字节为buffer长度(CLI输入时不需要这个长度字段)
const CLI_cmdTable_t CLI_cmdTable[] =
{
	//模块分隔字符串
	ADD_SECTION("test"), 
	
	//ADD_CLI_ITEMS("命令名(不能有空格)", 命令函数名, "参数类型", "参数说明", "命令功能描述"),
	ADD_CLI_ITEMS("test", tinyCLI_test, "1sfb", "uint8Data string floatData buffer", "test the simpleCli func"),
	
	TINY_CLI_END()
};

ADD_SECTION("test"), 
是不同模块分隔字符串，比如要添加个测试模式CLI命令可以在前面插入ADD_SECTION("test mode")

//ADD_CLI_ITEMS("命令名(不能有空格)", 命令函数名, "参数类型", "参数说明", "命令功能描述"),
ADD_CLI_ITEMS("test", tinyCLI_test, "1sfb", "uint8Data string floatData buffer", "test the simpleCli func"),
是具体的CLI命令，格式要严格按照以上格式添加，
"test" - 是命令名就是你通过CLI需要输入的命令字符串：test .....
tinyCLI_test - 是对应的CLI命令调用函数，类型一定要是void func(void)
"1sfb" - 是你这条CLI命令所有参数的参数类型，每一个字符就是一个参数的类型，12sfb代表四个参数类型依次是：
         1字节整型、字符串数据类型、浮点类型数据、buffer HEX数据类型
"uint8Data string floatData buffer" - 所有参数的描述，方便使用者查看
"test the simpleCli func" - 整个功能描述


在CLI函数里面获取用户输入的参数需要使用void *CLI_getArguments(uint8_t argNum)
例如在void tinyCLI_test(void)中1sfb四个参数分别会用
*(int8_t *)CLI_getArguments(1)
*(uint16_t *)CLI_getArguments(2)
(char *)CLI_getArguments(3)
*(float *)CLI_getArguments(4)
(uint8_t *)CLI_getArguments(5)
1 - 4字节整型和浮点数获取到的是对应数据，字符串和HEX buffer获取到的是对应的数据指针

如果CLI命令需要回复则在命令函数最后调用CLI_RSP(); ,括号内可以像printf这样填写你需要打印返回的信息    
例如：
CLI_RSP("value: %d", *(int8_t *)CLI_getArguments(1));

带CRC校验回复使用以下函数
CLI_RSP_WITH_CRC()


5.怎么使用

输入：help ，将返回整个CLI 命令表：
********************************************* tiny CLI module *********************************************
arguments type define: 
1->uint8_t/int8_t, 2->unit16_t/int16_t, 4->unit32_t/int32_t,f->float/double, s->char *, b->uint8_t buf[] 
example :
if test cmd arguments type is (12sfb)->(int8_t a, uint16_t b, char *s, float f, uint8_t *p) 
so you should input as : test -20 0xAB12 "hello" 3.141592 11ff86
********************************************* by chris.huang **********************************************

seq number > command      |(args type) -> args description            //func description

-------------------------------------------------- test ---------------------------------------------------
  1 > test                 (12sfb)->int8 uint16 string float buffer   //test the tiny CLI func
  
注意：命令和参数以及参数和参数间使用一个空格隔开，最后使用回车换行（\r\n）结束。

输入测试命令：test -20 0xAB12 "hello" 3.141592 11ff86
应该收到返回： 
 ***** hello tinyCLI args: -20 0xAB12 "hello" 3.141592 0x11 0xff 0x86 *****
test@RSP value: -20
test@RSP value: -20 @C-0x4585




ACK和CRC的使用(主要是产测中使用):

如果需要开启CLI命令CRC和ACK则在整条命令之后输入@A@C-0x----

比如color-HSLW-move 2.7 140 90 3 12 @A@C-0x9988

@A  ---- 表示本命令需要ACK
@C-9988  -----表示命令开启CRC16_CCITT校验, 检验范围是color-HSLW-move 2.7 140 90 3 12整串
字符串(包含中间的空格，@前的空格不算)，9988  为CRC16_CCITT uint16_t校验值 0x9988

如果对方收到命令则会立马回复
color-HSLW-move@ACK

@A@C-9988 只能放在命令的最后

如果CRC失败则会回复color-HSLW-move@NACK 0x9ca4，最后一个是cli计算CRC值，命令将不会执行

所有参数一个空格隔开，参数顺序不限，大小写均可







