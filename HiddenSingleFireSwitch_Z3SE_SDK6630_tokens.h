// This file is generated by Simplicity Studio.  Please do not edit manually.
//
//

// This file contains the tokens for attributes stored in flash


// Identifier tags for tokens
// Creator for attribute: generic device type, singleton.
#define CREATOR_GENERIC_DEVICE_TYPE_SINGLETON 0xB000
#define NVM3KEY_GENERIC_DEVICE_TYPE_SINGLETON ( NVM3KEY_DOMAIN_ZIGBEE | 0xB000 )
// Creator for attribute: physical environment, singleton.
#define CREATOR_PHYSICAL_ENVIRONMENT_SINGLETON 0xB001
#define NVM3KEY_PHYSICAL_ENVIRONMENT_SINGLETON ( NVM3KEY_DOMAIN_ZIGBEE | 0xB001 )
// Creator for attribute: power on status, singleton.
#define CREATOR_POWER_ON_STATUS_SINGLETON 0xB002
#define NVM3KEY_POWER_ON_STATUS_SINGLETON ( NVM3KEY_DOMAIN_ZIGBEE | 0xB002 )
// Creator for attribute: auth code, singleton.
#define CREATOR_AUTH_CODE_SINGLETON 0xB003
#define NVM3KEY_AUTH_CODE_SINGLETON ( NVM3KEY_DOMAIN_ZIGBEE | 0xB003 )


// Types for the tokens
#ifdef DEFINETYPES
typedef uint8_t  tokType_generic_device_type;
typedef uint8_t  tokType_physical_environment;
typedef uint8_t  tokType_power_on_status;
typedef uint8_t  tokType_auth_code[50];
#endif // DEFINETYPES


// Actual token definitions
#ifdef DEFINETOKENS
DEFINE_BASIC_TOKEN(GENERIC_DEVICE_TYPE_SINGLETON, tokType_generic_device_type, 0)
DEFINE_BASIC_TOKEN(PHYSICAL_ENVIRONMENT_SINGLETON, tokType_physical_environment, 0x00)
DEFINE_BASIC_TOKEN(POWER_ON_STATUS_SINGLETON, tokType_power_on_status, 0x01)
DEFINE_BASIC_TOKEN(AUTH_CODE_SINGLETON, tokType_auth_code, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})
#endif // DEFINETOKENS


// Macro snippet that loads all the attributes from tokens
#define GENERATED_TOKEN_LOADER(endpoint) do {\
  uint8_t ptr[50]; \
  halCommonGetToken((tokType_generic_device_type *)ptr, TOKEN_GENERIC_DEVICE_TYPE_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_BASIC_CLUSTER_ID, ZCL_GENERIC_DEVICE_TYPE_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_ENUM8_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_physical_environment *)ptr, TOKEN_PHYSICAL_ENVIRONMENT_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_BASIC_CLUSTER_ID, ZCL_PHYSICAL_ENVIRONMENT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_ENUM8_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_power_on_status *)ptr, TOKEN_POWER_ON_STATUS_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_ORVIBO_PRIVATE_CLUSTER_ID, ZCL_POWER_ON_STATUS_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT8U_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_auth_code *)ptr, TOKEN_AUTH_CODE_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_ORVIBO_PRIVATE_CLUSTER_ID, ZCL_AUTH_CODE_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_CHAR_STRING_ATTRIBUTE_TYPE); \
} while(false)


// Macro snippet that saves the attribute to token
#define GENERATED_TOKEN_SAVER do {\
  uint8_t allZeroData[50]; \
  MEMSET(allZeroData, 0, 50); \
  if ( data == NULL ) data = allZeroData; \
  if ( clusterId == 0x00 ) { \
    if ( metadata->attributeId == 0x0009 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_GENERIC_DEVICE_TYPE_SINGLETON, data); \
    if ( metadata->attributeId == 0x0011 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_PHYSICAL_ENVIRONMENT_SINGLETON, data); \
  } else if ( clusterId == 0xFF00 ) { \
    if ( metadata->attributeId == 0x0001 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_POWER_ON_STATUS_SINGLETON, data); \
    if ( metadata->attributeId == 0xFF00 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_AUTH_CODE_SINGLETON, data); \
  }\
} while(false)


